<?php
/**
 * CLIRequest
 */

namespace Orpheus\InputController\CLIController;

use Orpheus\InputController\InputRequest;

/**
 * The CLIRequest class
 * 
 * @author Florent Hazard <contact@sowapps.com>
 *
 */
class CLIRequest extends InputRequest {
	
	/**
	 * Get this request as string
	 * 
	 * @return string
	 */
	public function __toString() {
		return $this->path;
	}
	
	/**
	 * Get the URL used for this request
	 * 
	 * @return string
	 */
	public function getURL() {
		return $this->route->formatURL($this->parameters);
	}
	
	/**
	 * Get all available routes
	 * 
	 * @return CLIRoute[]
	 * @see \Orpheus\InputController\InputRequest::getRoutes()
	 */
	public function getRoutes() {
		return CLIRoute::getRoutes();
	}
	
	/**
	 * Generate CLIRequest from environment
	 * 
	 * @return CLIRequest
	 */
	public static function generateFromEnvironment() {
		global $argc, $argv;
		
		$stdin = defined('STDIN') ? STDIN : fopen('php://stdin', 'r');
		$data = stream_get_meta_data($stdin);
		$input = null;
		if( empty($data['seekable']) ) {
			$input = trim(stream_get_contents($stdin));
		}
		
		/*
		$path = '/';
		if( $argc > 1 && $argv[1][0] !== '-' ) {
			$path = $argv[1];
			$parameters = array_slice($argv, 2);
		} else {
			$parameters = array_slice($argv, 1);
		}
		*/
		$path = $argv[1];
		$parameters = array_slice($argv, 2);
		
		$request = new static($path, $parameters, $input);
// 		$request->setContent($input);
		return $request;
	}
	
	/**
	 * Handle the current request as a CLIRequest one
	 * This method ends the script
	 */
	public static function handleCurrentRequest() {
		try {
			CLIRoute::initialize();
			static::$mainRequest = static::generateFromEnvironment();
			$response = static::$mainRequest->process();
		} catch( \Exception $e ) {
			$response = CLIResponse::generateFromException($e);
		}
		$response->process();
		exit($response->getCode());
	}
	
	/**
	 * Get the name of the route class associated to a CLIRequest
	 * 
	 * @return string
	 */
	public static function getRouteClass() {
		return '\Orpheus\InputController\CLIController\CLIRoute';
	}
	
	/**
	 * Set the content (input & input type)
	 * 
	 * @param string $content
	 * @param string $contentType
	 * @return \Orpheus\InputController\CLIController\CLIRequest
	 */
	protected function setContent($content) {
		return $this->setInput($content);
	}

	/**
	 * Get all input data
	 *
	 * @return array
	 */
	public function getAllData() {
		return $this->getInput();
	}
	
	/**
	 * Get a data by $key, assuming $default
	 * 
	 * @param string $key
	 * @param mixed $default
	 * @return mixed
	 */
	public function getData($key, $default=null) {
		return $this->getInputValue($key, $default);
	}
	
	/**
	 * Get the data by key with array as default
	 * 
	 * @param string $key
	 * @return mixed
	 */
	public function getArrayData($key) {
		return $this->getInputValue($key, array());
	}
	
	/**
	 * Test if data $key is an array
	 * 
	 * @param string $key
	 * @return boolean
	 */
	public function hasArrayData($key=null) {
		return is_array($this->getData($key));
	}
	
	/**
	 * Test if data contains the $key
	 * 
	 * @param string $key
	 * @return boolean
	 */
	public function hasData($key=null) {
		return $key ? $this->hasInputValue($key) : $this->hasInput();
	}

	/**
	 * Test if path contains a value and return it as parameter
	 *
	 * @param string $path The path to get the value
	 * @param string $value The value as ouput parameter
	 * @return boolean
	 */
	public function hasDataKey($path=null, &$value=null) {
		$v = $this->getData($path);
		if( !$v || !is_array($v) ) { return false; }
		$value = key($v);
		return true;
	}
}

