<?php
/**
 * HTTPRequest
 */

namespace Orpheus\InputController\HTTPController;

use Orpheus\InputController\InputRequest;
use Orpheus\InputController\ControllerRoute;

/**
 * The HTTPRequest class
 * 
 * @author Florent Hazard <contact@sowapps.com>
 *
 */
class HTTPRequest extends InputRequest {

	/**
	 * The used method for this request
	 * 
	 * @var string
	 */
	protected $method;
	
	/**
	 * The scheme used to access this route
	 * 
	 * @var string
	 */
	protected $scheme;
	
	/**
	 * The request host domain name
	 * 
	 * @var string
	 */
	protected $domain;
	
	/**
	 * The headers sent to this route
	 * 
	 * @var array
	 */
	protected $headers;
	
	/**
	 * The cookies sent to this route
	 * 
	 * @var array
	 */
	protected $cookies;
	
	/**
	 * The uploaded files sent to this route
	 * 
	 * @var array
	 */
	protected $files;
	
	/**
	 * The input content type
	 * 
	 * @var string
	 * @see https://en.wikipedia.org/wiki/Media_type
	 */
	protected $inputType;
	
	/**
	 * The values in path
	 * 
	 * @var \stdClass
	 */
	protected $pathValues;

	/**
	 * Constructor
	 * 
	 * @param string $method
	 * @param string $path
	 * @param array $parameters
	 * @param array $input
	 */
	public function __construct($method, $path, $parameters=null, $input=null) {
		parent::__construct($path, $parameters, $input);
		$this->setMethod($method);
	}
	
	/**
	 * Get this request as string
	 * 
	 * @return string
	 */
	public function __toString() {
		return $this->method.'("'.$this->path.'")';
	}
	
	/**
	 * Get the URL used for this request
	 * 
	 * @return string
	 */
	public function getURL() {
		return $this->scheme.'://'.$this->domain.$this->path.($this->parameters ? '?'.http_build_query($this->parameters) : '');
	}
	
	/**
	 * Find a matching route according to the request
	 * 
	 * @param boolean $alternative Is this looking for an alternative route ?
	 * @return Route
	 */
	public function findFirstMatchingRoute($alternative=false) {
		/* @var ControllerRoute $route */
		foreach( $this->getRoutes() as $methodRoutes ) {
			if( !isset($methodRoutes[$this->method]) ) { continue; }
			/* @var $route HTTPRoute */
			$route = $methodRoutes[$this->method];
			$values = null;
			if( $route->isMatchingRequest($this, $values, $alternative) ) {
				$this->pathValues = (object) $values;
				return $route;
			}
		}
		return null;
	}
	
	/**
	 * 
	 * {@inheritDoc}
	 * @see \Orpheus\InputController\InputRequest::redirect()
	 * @param ControllerRoute $route
	 * @return RedirectHTTPResponse
	 */
	public function redirect(ControllerRoute $route) {
		return new RedirectHTTPResponse(u($route->getName()));
	}
	
	/**
	 * Get all available routes
	 * 
	 * @return HTTPRoute[]
	 * @see \Orpheus\InputController\InputRequest::getRoutes()
	 */
	public function getRoutes() {
		return HTTPRoute::getRoutes();
	}
	
	/**
	 * Generate HTTPRequest from environment
	 * 
	 * @return HTTPRequest
	 */
	public static function generateFromEnvironment() {

		// Get Content type
// 		list($contentType, $contentOptions)	= explodeList(';', $_SERVER['CONTENT_TYPE'], 2);
		$method = $_SERVER['REQUEST_METHOD'];
		
		if( !empty($_SERVER['CONTENT_TYPE']) ) {
			list($inputType) = explodeList(';', $_SERVER['CONTENT_TYPE'], 2);
			$inputType = trim($inputType);
		} else {
			$inputType = 'application/x-www-form-urlencoded';
		}
		
		// Get input
		$input	= null;
		if( $inputType === 'application/json' ) {
// 		if( isset($_SERVER['CONTENT_TYPE']) && strpos(, 'application/json')!==false ) {
			$input	= json_decode(file_get_contents('php://input'), true);
			if( $input === null ) {
				throw new \Exception('malformedJSONBody', HTTP_BAD_REQUEST);
			}
		} else {
			//application/x-www-form-urlencoded
			if( $method === HTTPRoute::METHOD_PUT ) {
				parse_str(file_get_contents("php://input"), $input);
			} else
			if( isset($_POST) ) {
				$input = $_POST;
			}
		}
		$request = new static($method, parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH), $_GET);
		$request->setContent($input, $inputType)
			->setScheme(!empty($_SERVER['HTTPS']) ? 'https' : 'http')
			->setDomain($_SERVER['HTTP_HOST'])
			->setHeaders(getallheaders())
			->setCookies($_COOKIE)
			->setFiles($_FILES);
		return $request;
	}
	
	/**
	 * Handle the current request as a HTTPRequest one
	 * This method ends the script
	 */
	public static function handleCurrentRequest() {
		try {
			HTTPRoute::initialize();
			static::$mainRequest = static::generateFromEnvironment();
			$response = static::$mainRequest->process();
		} catch( \Exception $e ) {
			$response = HTMLHTTPResponse::generateFromException($e);
		}
		$response->process();
		die();
	}
	
	/**
	 * Get the name of the route class associated to a HTTPRequest
	 * 
	 * @return string
	 */
	public static function getRouteClass() {
		return '\Orpheus\InputController\HTTPController\HTTPRoute';
	}
	
	/**
	 * Get the method
	 * 
	 * @return string
	 */
	public function getMethod() {
		return $this->method;
	}
	
	/**
	 * Set the method
	 * 
	 * @param string $method
	 * @return \Orpheus\InputController\HTTPController\HTTPRequest
	 */
	protected function setMethod($method) {
		$this->method = $method;
		return $this;
	}
	
	/**
	 * Test if this is a GET request
	 * 
	 * @return boolean
	 */
	public function isGET() { return $this->method === HTTPRoute::METHOD_GET; }
	
	/**
	 * Test if this is a POST request
	 * 
	 * @return boolean
	 */
	public function isPOST() { return $this->method === HTTPRoute::METHOD_POST; }
	
	/**
	 * Test if this is a PUT request
	 * 
	 * @return boolean
	 */
	public function isPUT() { return $this->method === HTTPRoute::METHOD_PUT; }
	
	/**
	 * Test if this is a DELETE request
	 * 
	 * @return boolean
	 */
	public function isDELETE() { return $this->method === HTTPRoute::METHOD_DELETE; }
	
	/**
	 * Get the scheme
	 * 
	 * @return string
	 */
	public function getScheme() {
		return $this->scheme;
	}
	
	/**
	 * Set the scheme
	 * 
	 * @param string $scheme
	 * @return \Orpheus\InputController\HTTPController\HTTPRequest
	 */
	protected function setScheme($scheme) {
		$this->scheme = $scheme;
		return $this;
	}
	
	/**
	 * Get the host domain
	 * 
	 * @return string
	 */
	public function getDomain() {
		return $this->domain;
	}
	
	/**
	 * Set the host domain
	 * @param string $domain
	 * @return \Orpheus\InputController\HTTPController\HTTPRequest
	 */
	protected function setDomain($domain) {
		$this->domain = $domain;
		return $this;
	}
	
	/**
	 * Get the headers
	 * 
	 * @return array
	 */
	public function getHeaders() {
		return $this->headers;
	}
	
	/**
	 * Set the headers
	 * 
	 * @param array $headers
	 * @return \Orpheus\InputController\HTTPController\HTTPRequest
	 */
	protected function setHeaders($headers) {
		$this->headers = $headers;
		return $this;
	}
	
	/**
	 * Get the input type
	 * 
	 * @return string
	 */
	public function getInputType() {
		return $this->inputType;
	}
	
	/**
	 * Set the input type
	 * 
	 * @param string $inputType
	 * @return \Orpheus\InputController\HTTPController\HTTPRequest
	 */
	protected function setInputType($inputType) {
		$this->inputType = $inputType;;
		return $this;
	}
	
	/**
	 * Set the content (input & input type)
	 * 
	 * @param string $content
	 * @param string $contentType
	 * @return \Orpheus\InputController\HTTPController\HTTPRequest
	 */
	protected function setContent($content, $contentType) {
		return $this->setInput($content)->setInputType($contentType);
	}
	
	/**
	 * Get the cookies
	 * 
	 * @return array
	 */
	public function getCookies() {
		return $this->cookies;
	}
	
	/**
	 * Set the cookies
	 * 
	 * @param array $cookies
	 * @return \Orpheus\InputController\HTTPController\HTTPRequest
	 */
	protected function setCookies($cookies) {
		$this->cookies = $cookies;
		return $this;
	}

	/**
	 * Get the uploaded files
	 *
	 * @return array
	 */
	public function getFiles() {
		return $this->files;
	}

	/**
	 * Set the uploaded files
	 *
	 * @param array $files
	 * @return \Orpheus\InputController\HTTPController\HTTPRequest
	 */
	protected function setFiles($files) {
		$this->files = $files;
		return $this;
	}

	/**
	 * Get all input data
	 *
	 * @return array
	 */
	public function getAllData() {
		return $this->getInput();
	}
	
	/**
	 * Get a data by $key, assuming $default
	 * 
	 * @param string $key
	 * @param mixed $default
	 * @return mixed
	 */
	public function getData($key, $default=null) {
		return $this->getInputValue($key, $default);
	}
	
	/**
	 * Get the data by key with array as default
	 * 
	 * @param string $key
	 * @return mixed
	 */
	public function getArrayData($key) {
		return $this->getInputValue($key, array());
	}
	
	/**
	 * Test if data $key is an array
	 * 
	 * @param string $key
	 * @return boolean
	 */
	public function hasArrayData($key=null) {
		return is_array($this->getData($key));
	}
	
	/**
	 * Test if data contains the $key
	 * 
	 * @param string $key
	 * @return boolean
	 */
	public function hasData($key=null) {
		return $key ? $this->hasInputValue($key) : $this->hasInput();
	}

	/**
	 * Test if path contains a value and return it as parameter
	 *
	 * @param string $path The path to get the value
	 * @param string $value The value as ouput parameter
	 * @return boolean
	 */
	public function hasDataKey($path=null, &$value=null) {
		$v = $this->getData($path);
		if( !$v || !is_array($v) ) { return false; }
		$value = key($v);
		return true;
	}
	
	/**
	 * Get path values
	 * 
	 * @return stdClass
	 */
	public function getPathValues() {
		return $this->pathValues;
	}
	
	/**
	 * Get path value by $key, assuming $default
	 * 
	 * @param string $key
	 * @param mixed $default
	 * @return string The path value for $key
	 */
	public function getPathValue($key, $default=null) {
		return $this->hasPathValue($key) ? $this->pathValues->$key : $default;
	}
	
	/**
	 * Check request has path value $key
	 * 
	 * @param string $key
	 * @return boolean True if it has the $key value in path
	 */
	public function hasPathValue($key) {
		return isset($this->pathValues->$key);
	}
}

